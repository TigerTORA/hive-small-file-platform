<template>
  <div class="dashboard">
    <!-- 刷新控制栏 -->
    <div class="dashboard-header">
      <div class="header-left">
        <h1 class="dashboard-title">监控仪表盘</h1>
        <p class="dashboard-subtitle">实时监控Hive小文件状况</p>
      </div>
      
      <div class="header-right">
        <div class="refresh-info" v-if="monitoringStore.isAutoRefreshEnabled">
          <el-icon><Timer /></el-icon>
          <span>{{ nextRefreshText }}</span>
        </div>
        
        <el-button-group>
          <el-button 
            :type="monitoringStore.isAutoRefreshEnabled ? 'success' : 'default'"
            @click="toggleAutoRefresh"
            :icon="monitoringStore.isAutoRefreshEnabled ? VideoPlay : VideoPause"
          >
            {{ monitoringStore.isAutoRefreshEnabled ? '自动刷新' : '手动模式' }}
          </el-button>
          
          <el-button 
            type="primary" 
            @click="performRefresh"
            :loading="isRefreshing"
            :icon="Refresh"
          >
            立即刷新
          </el-button>
        </el-button-group>
      </div>
    </div>

    <!-- 统计卡片区域 -->
    <div class="dashboard-cards">
      <div class="cards-grid">
        <div class="card-item">
          <ClusterCard 
            @cluster-change="handleClusterChange"
            :show-selector="true"
            :show-footer="true"
          />
        </div>
        
        <div class="card-item">
          <TableCard 
            @refresh="performRefresh"
            @scan-tables="handleScanTables"
            @view-tables="handleViewTables"
            :loading="isRefreshing"
            :scanning="scanningTables"
          />
        </div>
        
        <div class="card-item">
          <FileCard 
            :show-metrics="true"
            :show-trend="true"
          />
        </div>
        
        <div class="card-item">
          <SmallFileCard 
            @start-merge="handleStartMerge"
            @analyze-files="handleAnalyzeFiles"
            :merging="mergingFiles"
            :analyzing="analyzingFiles"
          />
        </div>
      </div>
    </div>

    <!-- 图表分析区域 -->
    <div class="dashboard-charts">
      <!-- 主要监控: Hive表文件数监控 -->
      <div class="chart-full-width">
        <TableFileCountChart 
          :cluster-id="monitoringStore.settings.selectedCluster"
          :refreshing="isRefreshing"
          @refresh="performRefresh"
          @table-analyze="handleAnalyzeTable"
        />
      </div>
      
      <!-- 辅助图表 -->
      <div class="charts-grid">
        <div class="chart-main">
          <TrendChart 
            :data="dashboardStore.trends"
            :loading="dashboardStore.loading.trends"
            :error="dashboardStore.errors.trends"
            :refreshing="isRefreshing"
            @refresh="performRefresh"
            @export="handleExportTrend"
            @period-change="handlePeriodChange"
            @chart-click="handleTrendChartClick"
          />
        </div>
        
        <div class="chart-side">
          <DistributionChart 
            :data="dashboardStore.fileDistribution"
            :loading="dashboardStore.loading.fileDistribution"
            :error="dashboardStore.errors.fileDistribution"
            :refreshing="isRefreshing"
            @refresh="performRefresh"
            @export="handleExportDistribution"
            @chart-click="handleDistributionChartClick"
            @row-click="handleDistributionRowClick"
          />
        </div>
      </div>
    </div>

    <!-- 数据表格区域 -->
    <div class="dashboard-tables">
      <div class="tables-grid">
        <!-- TOP表排行 -->
        <div class="table-card">
          <el-card shadow="hover">
            <template #header>
              <div class="table-header">
                <div class="header-left">
                  <el-icon class="header-icon"><TrendCharts /></el-icon>
                  <div class="header-text">
                    <h3 class="header-title">小文件TOP表</h3>
                    <p class="header-subtitle">小文件数量最多的表</p>
                  </div>
                </div>
                <div class="header-right">
                  <el-button 
                    type="text" 
                    size="small" 
                    @click="handleViewAllTables"
                  >
                    查看全部
                  </el-button>
                </div>
              </div>
            </template>
            
            <div class="table-content">
              <el-table 
                :data="dashboardStore.topTables" 
                stripe
                :loading="dashboardStore.loading.topTables"
                empty-text="暂无数据"
                @row-click="handleTableRowClick"
                class="top-tables-table"
              >
                <el-table-column type="index" label="排名" width="60" />
                <el-table-column prop="table_name" label="表名" show-overflow-tooltip />
                <el-table-column prop="small_files" label="小文件数" width="100">
                  <template #default="{ row }">
                    <span class="number-value">{{ formatNumber(row.small_files) }}</span>
                  </template>
                </el-table-column>
                <el-table-column prop="small_file_ratio" label="小文件占比" width="100">
                  <template #default="{ row }">
                    <el-progress 
                      :percentage="row.small_file_ratio" 
                      :color="getProgressColor(row.small_file_ratio)"
                      :show-text="false"
                      stroke-width="6"
                      style="width: 60px"
                    />
                    <span class="ratio-text">{{ row.small_file_ratio }}%</span>
                  </template>
                </el-table-column>
                <el-table-column label="操作" width="80">
                  <template #default="{ row }">
                    <el-button 
                      type="text" 
                      size="small" 
                      @click.stop="handleAnalyzeTable(row)"
                    >
                      分析
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>
          </el-card>
        </div>

        <!-- 最近任务 -->
        <div class="table-card">
          <el-card shadow="hover">
            <template #header>
              <div class="table-header">
                <div class="header-left">
                  <el-icon class="header-icon"><List /></el-icon>
                  <div class="header-text">
                    <h3 class="header-title">最近任务</h3>
                    <p class="header-subtitle">最近执行的合并任务</p>
                  </div>
                </div>
                <div class="header-right">
                  <el-button 
                    type="text" 
                    size="small" 
                    @click="handleViewAllTasks"
                  >
                    查看全部
                  </el-button>
                </div>
              </div>
            </template>
            
            <div class="table-content">
              <el-table 
                :data="dashboardStore.recentTasks" 
                stripe
                :loading="dashboardStore.loading.recentTasks"
                empty-text="暂无任务记录"
                @row-click="handleTaskRowClick"
                class="recent-tasks-table"
              >
                <el-table-column prop="task_name" label="任务名称" show-overflow-tooltip />
                <el-table-column prop="table_name" label="目标表" width="120" show-overflow-tooltip />
                <el-table-column prop="status" label="状态" width="80">
                  <template #default="{ row }">
                    <el-tag :type="getStatusType(row.status)" size="small">
                      {{ getStatusText(row.status) }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="created_time" label="创建时间" width="120">
                  <template #default="{ row }">
                    <span class="time-value">{{ formatTime(row.created_time) }}</span>
                  </template>
                </el-table-column>
                <el-table-column label="操作" width="80">
                  <template #default="{ row }">
                    <el-button 
                      type="text" 
                      size="small" 
                      @click.stop="handleViewTask(row)"
                    >
                      详情
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>
          </el-card>
        </div>
      </div>
    </div>

    <!-- 集群状态概览 -->
    <div class="dashboard-clusters" v-if="dashboardStore.clusterStats.length > 0">
      <el-card shadow="hover">
        <template #header>
          <div class="clusters-header">
            <div class="header-left">
              <el-icon class="header-icon"><Connection /></el-icon>
              <div class="header-text">
                <h3 class="header-title">集群状态概览</h3>
                <p class="header-subtitle">各集群的运行状态和统计信息</p>
              </div>
            </div>
          </div>
        </template>
        
        <div class="clusters-grid">
          <div 
            class="cluster-item" 
            v-for="cluster in dashboardStore.clusterStats" 
            :key="cluster.id"
            @click="handleSelectCluster(cluster)"
            :class="{ 'active': monitoringStore.settings.selectedCluster === cluster.id }"
          >
            <div class="cluster-info">
              <div class="cluster-name">{{ cluster.name }}</div>
              <div class="cluster-status" :class="`status-${cluster.status}`">
                {{ getClusterStatusText(cluster.status) }}
              </div>
            </div>
            
            <div class="cluster-stats">
              <div class="stat-item">
                <span class="stat-label">表数量</span>
                <span class="stat-value">{{ cluster.table_count || 0 }}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">文件数</span>
                <span class="stat-value">{{ formatNumber(cluster.file_count || 0) }}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">小文件占比</span>
                <span class="stat-value danger">{{ cluster.small_file_ratio || 0 }}%</span>
              </div>
            </div>
          </div>
        </div>
      </el-card>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { 
  Timer, VideoPlay, VideoPause, Refresh, TrendCharts, List, Connection 
} from '@element-plus/icons-vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { 
  ClusterCard, TableCard, FileCard, SmallFileCard,
  TrendChart, DistributionChart, TableFileCountChart 
} from '@/components'
import { useDashboardStore } from '@/stores/dashboard'
import { useMonitoringStore } from '@/stores/monitoring'
import { useRealtime } from '@/composables/useRealtime'

const router = useRouter()
const dashboardStore = useDashboardStore()
const monitoringStore = useMonitoringStore()

const { 
  isRefreshing, 
  nextRefreshIn,
  performRefresh,
  startAutoRefresh,
  stopAutoRefresh 
} = useRealtime()

// 计算属性
const nextRefreshText = computed(() => {
  if (!monitoringStore.isAutoRefreshEnabled) return ''
  if (nextRefreshIn.value <= 0) return '刷新中...'
  return `${nextRefreshIn.value}秒后刷新`
})

// 操作状态
const scanningTables = computed(() => false) // TODO: 实现表扫描状态
const mergingFiles = computed(() => false) // TODO: 实现文件合并状态  
const analyzingFiles = computed(() => false) // TODO: 实现文件分析状态

// 事件处理
function toggleAutoRefresh() {
  monitoringStore.toggleAutoRefresh()
  if (monitoringStore.isAutoRefreshEnabled) {
    startAutoRefresh()
  } else {
    stopAutoRefresh()
  }
}

function handleClusterChange(clusterId: number) {
  performRefresh()
}

function handleScanTables() {
  ElMessage.info('开始扫描表...')
  // TODO: 实现表扫描逻辑
}

function handleViewTables() {
  router.push('/tables')
}

function handleStartMerge() {
  ElMessageBox.confirm(
    '确定要开始合并小文件吗？此操作可能需要较长时间。',
    '确认合并',
    {
      confirmButtonText: '开始合并',
      cancelButtonText: '取消',
      type: 'warning'
    }
  ).then(() => {
    ElMessage.success('合并任务已创建')
    // TODO: 实现文件合并逻辑
  }).catch(() => {
    ElMessage.info('已取消合并')
  })
}

function handleAnalyzeFiles() {
  ElMessage.info('开始深度分析...')
  // TODO: 实现深度分析逻辑
}

function handleExportTrend() {
  ElMessage.info('导出趋势图表...')
  // TODO: 实现图表导出
}

function handleExportDistribution() {
  ElMessage.info('导出分布图表...')
  // TODO: 实现图表导出
}

function handlePeriodChange(days: number) {
  dashboardStore.loadTrends(monitoringStore.settings.selectedCluster, days)
}

function handleTrendChartClick(params: any) {
  console.log('Trend chart clicked:', params)
  // TODO: 处理图表点击事件
}

function handleDistributionChartClick(params: any) {
  console.log('Distribution chart clicked:', params)
  // TODO: 处理图表点击事件
}

function handleDistributionRowClick(item: any, index: number) {
  console.log('Distribution row clicked:', item, index)
  // TODO: 处理分布表格行点击
}

function handleTableRowClick(row: any) {
  router.push(`/tables?table=${row.table_name}`)
}

function handleAnalyzeTable(row: any) {
  const tableName = row.table_name || `${row.database_name}.${row.table_name}`
  ElMessage.info(`分析表 ${tableName}...`)
  // TODO: 实现表分析逻辑
}

function handleViewAllTables() {
  router.push('/tables')
}

function handleTaskRowClick(row: any) {
  router.push(`/tasks/${row.id}`)
}

function handleViewTask(row: any) {
  router.push(`/tasks/${row.id}`)
}

function handleViewAllTasks() {
  router.push('/tasks')
}

function handleSelectCluster(cluster: any) {
  monitoringStore.setSelectedCluster(cluster.id)
  performRefresh()
}

// 格式化函数
function formatNumber(num: number): string {
  return monitoringStore.formatNumber(num)
}

function formatTime(time: string): string {
  return monitoringStore.formatDate(time)
}

function getStatusType(status: string): string {
  const statusMap: Record<string, string> = {
    'pending': 'info',
    'running': 'warning',
    'success': 'success',
    'failed': 'danger'
  }
  return statusMap[status] || 'info'
}

function getStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    'pending': '等待中',
    'running': '运行中',
    'success': '成功',
    'failed': '失败'
  }
  return statusMap[status] || status
}

function getProgressColor(ratio: number): string {
  if (ratio >= 60) return '#F56C6C'
  if (ratio >= 40) return '#E6A23C'
  return '#67C23A'
}

function getClusterStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    'active': '运行中',
    'inactive': '已停止',
    'error': '异常'
  }
  return statusMap[status] || status
}


// 生命周期
onMounted(async () => {
  await dashboardStore.loadAllData(monitoringStore.settings.selectedCluster)
})
</script>

<style scoped>
.dashboard {
  padding: 24px;
  min-height: 100vh;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 32px;
  padding: 24px 32px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.header-left h1.dashboard-title {
  margin: 0;
  font-size: 28px;
  font-weight: 700;
  color: #1f2937;
  line-height: 1.2;
}

.dashboard-subtitle {
  margin: 8px 0 0;
  font-size: 16px;
  color: #6b7280;
  line-height: 1.4;
}

.header-right {
  display: flex;
  align-items: center;
  gap: 16px;
}

.refresh-info {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
  color: #6b7280;
  padding: 8px 12px;
  background: #f9fafb;
  border-radius: 8px;
}

.dashboard-cards {
  margin-bottom: 32px;
}

.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 24px;
}

.card-item {
  transition: transform 0.3s ease;
}

.card-item:hover {
  transform: translateY(-2px);
}

.dashboard-charts {
  margin-bottom: 32px;
}

.chart-full-width {
  margin-bottom: 24px;
  transition: transform 0.3s ease;
}

.chart-full-width:hover {
  transform: translateY(-2px);
}

.charts-grid {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 24px;
}

.chart-main,
.chart-side {
  transition: transform 0.3s ease;
}

.chart-main:hover,
.chart-side:hover {
  transform: translateY(-2px);
}

.dashboard-tables {
  margin-bottom: 32px;
}

.tables-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
}

.table-card {
  transition: transform 0.3s ease;
}

.table-card:hover {
  transform: translateY(-2px);
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.table-header .header-left {
  display: flex;
  align-items: center;
  gap: 12px;
}

.header-icon {
  color: #409EFF;
  font-size: 20px;
}

.header-text h3.header-title {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: #1f2937;
  line-height: 1.2;
}

.header-subtitle {
  margin: 2px 0 0;
  font-size: 13px;
  color: #6b7280;
  line-height: 1.2;
}

.table-content {
  margin-top: 8px;
}

.number-value {
  font-weight: 600;
  color: #1f2937;
}

.ratio-text {
  font-size: 12px;
  color: #6b7280;
  margin-left: 8px;
}

.time-value {
  font-size: 13px;
  color: #6b7280;
}

.dashboard-clusters {
  margin-bottom: 32px;
}

.clusters-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.clusters-header .header-left {
  display: flex;
  align-items: center;
  gap: 12px;
}

.clusters-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 20px;
  margin-top: 16px;
}

.cluster-item {
  padding: 20px;
  border: 2px solid #e5e7eb;
  border-radius: 12px;
  background: #fafafa;
  cursor: pointer;
  transition: all 0.3s ease;
}

.cluster-item:hover {
  border-color: #409EFF;
  background: #f0f9ff;
  transform: translateY(-2px);
}

.cluster-item.active {
  border-color: #409EFF;
  background: linear-gradient(135deg, #409EFF10, #409EFF05);
}

.cluster-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.cluster-name {
  font-size: 16px;
  font-weight: 600;
  color: #1f2937;
}

.cluster-status {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.cluster-status.status-active {
  background: #d1fae5;
  color: #065f46;
}

.cluster-status.status-inactive {
  background: #f3f4f6;
  color: #6b7280;
}

.cluster-status.status-error {
  background: #fee2e2;
  color: #dc2626;
}

.cluster-stats {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
}

.stat-item {
  text-align: center;
}

.stat-label {
  display: block;
  font-size: 12px;
  color: #6b7280;
  margin-bottom: 4px;
}

.stat-value {
  display: block;
  font-size: 16px;
  font-weight: 600;
  color: #1f2937;
}

.stat-value.danger {
  color: #dc2626;
}

/* 响应式设计 */
@media (max-width: 1200px) {
  .charts-grid {
    grid-template-columns: 1fr;
  }
  
  .tables-grid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 768px) {
  .dashboard {
    padding: 16px;
  }
  
  .dashboard-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
    padding: 20px;
  }
  
  .header-right {
    justify-content: center;
  }
  
  .cards-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .clusters-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .cluster-stats {
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
  }
}

@media (max-width: 480px) {
  .dashboard {
    padding: 12px;
  }
  
  .dashboard-header {
    padding: 16px;
  }
  
  .header-left h1.dashboard-title {
    font-size: 24px;
  }
  
  .dashboard-subtitle {
    font-size: 14px;
  }
  
  .refresh-info {
    font-size: 12px;
    padding: 6px 8px;
  }
}
</style>