name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.0.0). Defaults to tag without v.'
        required: false

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_API: hive-small-file-api
  IMAGE_FE: hive-small-file-frontend

jobs:
  prepare:
    name: Prepare version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve version
        id: setver
        run: |
          if [ -n "${{ github.ref_name }}" ] && echo "${{ github.ref_name }}" | grep -E '^v[0-9]'; then
            V=${{ github.ref_name }}
            V=${V#v}
          elif [ -n "${{ inputs.version }}" ]; then
            V=${{ inputs.version }}
          else
            V=$(cat VERSION 2>/dev/null || echo latest)
          fi
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "Resolved VERSION=$V"

  build-and-push:
    name: Build and push images
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_API }}:${{ needs.prepare.outputs.version }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_FE }}:${{ needs.prepare.outputs.version }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ prepare, build-and-push ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate changelog (basic)
        id: notes
        run: |
          TAG="v${{ needs.prepare.outputs.version }}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "# Release $TAG" > RELEASE_NOTES.md
          echo "\nSee RELEASE.md for deployment details." >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: v${{ needs.prepare.outputs.version }}
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: gated deployment example (requires environment protection and a self-hosted runner or SSH secrets)
  # deploy-prod:
  #   name: Deploy to production
  #   runs-on: ubuntu-latest
  #   needs: [ build-and-push ]
  #   environment: production
  #   if: ${{ false }}
  #   steps:
  #     - name: Deploy via SSH to host
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         script: |
  #           export VERSION=${{ needs.prepare.outputs.version }}
  #           export IMAGE_API=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}
  #           export IMAGE_FE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_FE }}
  #           cd /opt/hive-platform && docker compose -f docker-compose.prod.yml pull || true
  #           cd /opt/hive-platform && VERSION=$VERSION IMAGE_API=$IMAGE_API IMAGE_FE=$IMAGE_FE docker compose -f docker-compose.prod.yml up -d
